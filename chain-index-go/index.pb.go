// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chain-index/index.proto

package pbchainindex // import "github.com/gisvr/protocode/chain-index-go"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import shared_go "github.com/gisvr/protocode/shared-go"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_EV_TX  EventType = 0
	EventType_EV_ACT EventType = 1
	EventType_EV_HB  EventType = 998
)

var EventType_name = map[int32]string{
	0:   "EV_TX",
	1:   "EV_ACT",
	998: "EV_HB",
}
var EventType_value = map[string]int32{
	"EV_TX":  0,
	"EV_ACT": 1,
	"EV_HB":  998,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_index_7ceb70001b5b9bc1, []int{0}
}

type SubscribeEventRequest struct {
	Chain                shared_go.ChainType `protobuf:"varint,1,opt,name=chain,proto3,enum=shared.api.ChainType" json:"chain,omitempty"`
	Addresss             []string            `protobuf:"bytes,2,rep,name=addresss,proto3" json:"addresss,omitempty"`
	BlockNumStart        int64               `protobuf:"varint,3,opt,name=block_num_start,json=blockNumStart,proto3" json:"block_num_start,omitempty"`
	BlockTimeStart       int64               `protobuf:"varint,4,opt,name=block_time_start,json=blockTimeStart,proto3" json:"block_time_start,omitempty"`
	Event                EventType           `protobuf:"varint,5,opt,name=event,proto3,enum=chainindex.api.EventType" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscribeEventRequest) Reset()         { *m = SubscribeEventRequest{} }
func (m *SubscribeEventRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeEventRequest) ProtoMessage()    {}
func (*SubscribeEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_7ceb70001b5b9bc1, []int{0}
}
func (m *SubscribeEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeEventRequest.Unmarshal(m, b)
}
func (m *SubscribeEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeEventRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeEventRequest.Merge(dst, src)
}
func (m *SubscribeEventRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeEventRequest.Size(m)
}
func (m *SubscribeEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeEventRequest proto.InternalMessageInfo

func (m *SubscribeEventRequest) GetChain() shared_go.ChainType {
	if m != nil {
		return m.Chain
	}
	return shared_go.ChainType_CHAIN_UNKNOWN
}

func (m *SubscribeEventRequest) GetAddresss() []string {
	if m != nil {
		return m.Addresss
	}
	return nil
}

func (m *SubscribeEventRequest) GetBlockNumStart() int64 {
	if m != nil {
		return m.BlockNumStart
	}
	return 0
}

func (m *SubscribeEventRequest) GetBlockTimeStart() int64 {
	if m != nil {
		return m.BlockTimeStart
	}
	return 0
}

func (m *SubscribeEventRequest) GetEvent() EventType {
	if m != nil {
		return m.Event
	}
	return EventType_EV_TX
}

type SubscribeEventReponse struct {
	Status               *shared_go.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Chain                shared_go.ChainType `protobuf:"varint,2,opt,name=chain,proto3,enum=shared.api.ChainType" json:"chain,omitempty"`
	Event                EventType           `protobuf:"varint,3,opt,name=event,proto3,enum=chainindex.api.EventType" json:"event,omitempty"`
	Address              string              `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	BlockNum             int64               `protobuf:"varint,5,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockTime            int64               `protobuf:"varint,6,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockHash            string              `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Txjson               string              `protobuf:"bytes,8,opt,name=txjson,proto3" json:"txjson,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscribeEventReponse) Reset()         { *m = SubscribeEventReponse{} }
func (m *SubscribeEventReponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeEventReponse) ProtoMessage()    {}
func (*SubscribeEventReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_7ceb70001b5b9bc1, []int{1}
}
func (m *SubscribeEventReponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeEventReponse.Unmarshal(m, b)
}
func (m *SubscribeEventReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeEventReponse.Marshal(b, m, deterministic)
}
func (dst *SubscribeEventReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeEventReponse.Merge(dst, src)
}
func (m *SubscribeEventReponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeEventReponse.Size(m)
}
func (m *SubscribeEventReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeEventReponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeEventReponse proto.InternalMessageInfo

func (m *SubscribeEventReponse) GetStatus() *shared_go.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SubscribeEventReponse) GetChain() shared_go.ChainType {
	if m != nil {
		return m.Chain
	}
	return shared_go.ChainType_CHAIN_UNKNOWN
}

func (m *SubscribeEventReponse) GetEvent() EventType {
	if m != nil {
		return m.Event
	}
	return EventType_EV_TX
}

func (m *SubscribeEventReponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SubscribeEventReponse) GetBlockNum() int64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *SubscribeEventReponse) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *SubscribeEventReponse) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *SubscribeEventReponse) GetTxjson() string {
	if m != nil {
		return m.Txjson
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeEventRequest)(nil), "chainindex.api.SubscribeEventRequest")
	proto.RegisterType((*SubscribeEventReponse)(nil), "chainindex.api.SubscribeEventReponse")
	proto.RegisterEnum("chainindex.api.EventType", EventType_name, EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChainIndexServiceClient is the client API for ChainIndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainIndexServiceClient interface {
	// 订阅事件
	SubscribeEvent(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (ChainIndexService_SubscribeEventClient, error)
}

type chainIndexServiceClient struct {
	cc *grpc.ClientConn
}

func NewChainIndexServiceClient(cc *grpc.ClientConn) ChainIndexServiceClient {
	return &chainIndexServiceClient{cc}
}

func (c *chainIndexServiceClient) SubscribeEvent(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (ChainIndexService_SubscribeEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChainIndexService_serviceDesc.Streams[0], "/chainindex.api.ChainIndexService/SubscribeEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &chainIndexServiceSubscribeEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChainIndexService_SubscribeEventClient interface {
	Recv() (*SubscribeEventReponse, error)
	grpc.ClientStream
}

type chainIndexServiceSubscribeEventClient struct {
	grpc.ClientStream
}

func (x *chainIndexServiceSubscribeEventClient) Recv() (*SubscribeEventReponse, error) {
	m := new(SubscribeEventReponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChainIndexServiceServer is the server API for ChainIndexService service.
type ChainIndexServiceServer interface {
	// 订阅事件
	SubscribeEvent(*SubscribeEventRequest, ChainIndexService_SubscribeEventServer) error
}

func RegisterChainIndexServiceServer(s *grpc.Server, srv ChainIndexServiceServer) {
	s.RegisterService(&_ChainIndexService_serviceDesc, srv)
}

func _ChainIndexService_SubscribeEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChainIndexServiceServer).SubscribeEvent(m, &chainIndexServiceSubscribeEventServer{stream})
}

type ChainIndexService_SubscribeEventServer interface {
	Send(*SubscribeEventReponse) error
	grpc.ServerStream
}

type chainIndexServiceSubscribeEventServer struct {
	grpc.ServerStream
}

func (x *chainIndexServiceSubscribeEventServer) Send(m *SubscribeEventReponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ChainIndexService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chainindex.api.ChainIndexService",
	HandlerType: (*ChainIndexServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEvent",
			Handler:       _ChainIndexService_SubscribeEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chain-index/index.proto",
}

func init() { proto.RegisterFile("chain-index/index.proto", fileDescriptor_index_7ceb70001b5b9bc1) }

var fileDescriptor_index_7ceb70001b5b9bc1 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xdd, 0x34, 0x36, 0x6d, 0xae, 0x58, 0xeb, 0xc8, 0x6a, 0xb6, 0x22, 0x94, 0x82, 0x52, 0x56,
	0x76, 0x22, 0xd5, 0x37, 0x7d, 0xb1, 0x4b, 0x61, 0x7d, 0x11, 0x49, 0xcb, 0x22, 0xbe, 0x94, 0x7c,
	0x5c, 0x9a, 0x71, 0x4d, 0x26, 0x66, 0x26, 0x6b, 0xfd, 0x53, 0xfe, 0x29, 0xc1, 0xdf, 0x21, 0xb9,
	0x93, 0x4d, 0x77, 0x55, 0xd8, 0xbe, 0x04, 0xee, 0x39, 0x67, 0x2e, 0xe7, 0x9c, 0xcc, 0xc0, 0xe3,
	0x38, 0x0d, 0x45, 0x7e, 0x22, 0xf2, 0x04, 0xb7, 0x3e, 0x7d, 0x79, 0x51, 0x4a, 0x2d, 0xd9, 0x80,
	0x08, 0x83, 0x84, 0x85, 0x18, 0x31, 0x95, 0x86, 0x25, 0x26, 0xbe, 0x96, 0x17, 0x98, 0x1b, 0xcd,
	0xe8, 0x61, 0x83, 0x29, 0x1d, 0xea, 0x4a, 0x19, 0x70, 0xf2, 0xcb, 0x82, 0xc3, 0x65, 0x15, 0xa9,
	0xb8, 0x14, 0x11, 0x2e, 0x2e, 0x31, 0xd7, 0x01, 0x7e, 0xab, 0x50, 0x69, 0xf6, 0x02, 0xba, 0xb4,
	0xd4, 0xb3, 0xc6, 0xd6, 0x74, 0x30, 0x3b, 0xe4, 0xe6, 0x78, 0xbd, 0x9e, 0x9f, 0xd6, 0xc4, 0xea,
	0x47, 0x81, 0x81, 0xd1, 0xb0, 0x11, 0xf4, 0xc3, 0x24, 0x29, 0x51, 0x29, 0xe5, 0x75, 0xc6, 0xf6,
	0xd4, 0x0d, 0xda, 0x99, 0x3d, 0x87, 0xfb, 0xd1, 0x57, 0x19, 0x5f, 0xac, 0xf3, 0x2a, 0x5b, 0x2b,
	0x1d, 0x96, 0xda, 0xb3, 0xc7, 0xd6, 0xd4, 0x0e, 0xee, 0x11, 0xfc, 0xa1, 0xca, 0x96, 0x35, 0xc8,
	0xa6, 0x30, 0x34, 0x3a, 0x2d, 0x32, 0x6c, 0x84, 0x77, 0x48, 0x38, 0x20, 0x7c, 0x25, 0x32, 0x34,
	0x4a, 0x1f, 0xba, 0x58, 0x5b, 0xf5, 0xba, 0x64, 0xed, 0x88, 0xdf, 0x4c, 0xcf, 0x29, 0x87, 0xb1,
	0x47, 0xba, 0xc9, 0xcf, 0xce, 0xbf, 0x29, 0x0b, 0x99, 0x2b, 0x64, 0xc7, 0xe0, 0x98, 0x3e, 0x28,
	0xe6, 0xdd, 0x19, 0xbb, 0x1e, 0x73, 0x49, 0x4c, 0xd0, 0x28, 0x76, 0x8d, 0x74, 0xf6, 0x68, 0xa4,
	0xf5, 0x68, 0xef, 0xe7, 0x91, 0x79, 0xd0, 0x6b, 0x2a, 0xa3, 0xd4, 0x6e, 0x70, 0x35, 0xb2, 0x27,
	0xe0, 0xb6, 0x05, 0x52, 0x64, 0x3b, 0xe8, 0x5f, 0x55, 0xc7, 0x9e, 0x02, 0xec, 0x5a, 0xf3, 0x1c,
	0x62, 0xdd, 0xb6, 0xaf, 0x1d, 0x9d, 0x86, 0x2a, 0xf5, 0x7a, 0xb4, 0xd8, 0xd0, 0x67, 0xa1, 0x4a,
	0xd9, 0x23, 0x70, 0xf4, 0xf6, 0x8b, 0x92, 0xb9, 0xd7, 0x27, 0xaa, 0x99, 0x8e, 0x39, 0xb8, 0xad,
	0x41, 0xe6, 0x42, 0x77, 0x71, 0xbe, 0x5e, 0x7d, 0x1a, 0x1e, 0x30, 0x00, 0x67, 0x71, 0xbe, 0x7e,
	0x77, 0xba, 0x1a, 0x5a, 0x0c, 0x08, 0x3e, 0x9b, 0x0f, 0x7f, 0xf7, 0x66, 0xdf, 0xe1, 0x01, 0x35,
	0xf0, 0xbe, 0xce, 0xb7, 0xc4, 0xf2, 0x52, 0xc4, 0xc8, 0x22, 0x18, 0xdc, 0x2c, 0x9d, 0x3d, 0xfb,
	0xbb, 0x85, 0xff, 0x5e, 0xbd, 0xd1, 0xad, 0x32, 0xfa, 0x77, 0x93, 0x83, 0x97, 0xd6, 0x1c, 0xe1,
	0x28, 0x96, 0x19, 0x8f, 0x44, 0x24, 0xb7, 0xbc, 0x7d, 0x0f, 0x9c, 0x8e, 0xce, 0x81, 0xec, 0x7c,
	0xac, 0x91, 0xcf, 0x6f, 0x37, 0x42, 0x37, 0xb2, 0x58, 0x66, 0x7e, 0x24, 0x36, 0xaf, 0x7d, 0xd2,
	0xc6, 0x32, 0x41, 0xbe, 0x11, 0xda, 0xbf, 0xf6, 0xb6, 0x4e, 0x36, 0xf2, 0x4d, 0x11, 0xed, 0x4c,
	0x44, 0x0e, 0x49, 0x5f, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x2b, 0x36, 0x07, 0x81, 0x03,
	0x00, 0x00,
}
